#!/bin/sh

source src/src-rarbs.sh
LINOS="[ "$OSTYPE" == "linux-gnu" ]"
ARCHDIST="[ -f "/etc/arch-release" ]"
UBUNTUDIST="[ -n "$(uname -a | grep Ubuntu)" ]"
MACOS="[ "$(uname)" == "Darwin" ]"
WINOS="[[ "OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]"
# BSDOS='[ "OSTYPE" == "freebsd" ]'

while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
main() { \
	# $OS just for dialog to make appropriate
	if $LINOS; then
		if [ -f "/etc/arch-release" ]; then
			OS="Arch Linux"
			pacman --noconfirm --needed -S dialog || error "Are you sure you're running this as the root user, are on an Arch-based distribution and have an internet connection?"
		else
			# TODO: add another here..
			OS="Linux"
		fi
		# Welcome user and pick dotfiles.
		welcomemsg || error "User Exited"

		# Pick type Minimal or Full?
		rarbtype || error "rarbtype error"

		# Get and verify username and password.
		getuserandpass || error "User exited."

		# Give warning if user already exists.
		usercheck || error "User exited."

		# Get bitwarden user and verify email and password
		isuserbw || error "User Exited"

		# Last chance for user to back out before install.
		preinstallmsg || error "User exited."

		# Refresh Arch keyrings.
		refreshkeys || error "Error automatically refreshing Arch keyring. Consider doing so manually."

		for x in curl base-devel git ntp zsh; do
			dialog --title "RARBS Installation" --infobox "Installing \`$x\` which is required to install and configure other programs." 5 70
			installpkg "$x"
		done

		dialog --title "RARBS Installation" --infobox "Synchronizing system time to ensure successful and secure installation of software..." 4 70
		ntpdate 0.id.pool.ntp.org >/dev/null 2>&1

		adduserandpass || error "Error adding username and/or password."

		[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers # Just in case

		# Allow user to run sudo without password. Since AUR programs must be installed
		# in a fakeroot environment, this is required for all builds with AUR.
		newperms "%wheel ALL=(ALL) NOPASSWD: ALL"

		# Make pacman and yay colorful and adds eye candy on the progress bar because why not.
		grep -q "^Color" /etc/pacman.conf || sed -i "s/^#Color$/Color/" /etc/pacman.conf
		grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf

		# Use all cores for compilation.
		sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf

		# manualinstall $aurhelper || error "Failed to install AUR helper."
		manualinstall $aurhelper || error "Failed to install $aurhelper (AUR helper)."

		# The command that does all the installing. Reads the progs.csv file and
		# installs each needed program the way required. Be sure to run this only after
		# the user has been created and has priviledges to run sudo without a password
		# and all build dependencies are installed.
		installationloop

		# 
		dialog --title "RARBS Installation" --infobox "Finally, installing \`libxft-bgra\` to enable color emoji in suckless software without crashes." 5 70
		yes | sudo -u "$name" $aurhelper -S libxft-bgra-git >/dev/null 2>&1

		# Most important command! Get rid of the beep!
		systembeepoff

		# chezgitrepo "$dotfilesrepo"

		# Make zsh the default shell for the user.
		chsh -s /bin/zsh "$name" >/dev/null 2>&1
		sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"

		# Tap to click
		# TODO: Check  with `dmidecode --string chassis-type` to know if you're runing laptop or desktop
		dmidecode --string chassis-type | grep "Notebook" && [ ! -f /etc/X11/xorg.conf.d/40-libinput.conf ] && printf 'Section "InputClass"
				Identifier "libinput touchpad catchall"
				MatchIsTouchpad "on"
				MatchDevicePath "/dev/input/event*"
				Driver "libinput"
			# Enable left mouse button by tapping
			Option "Tapping" "on"
		EndSection' > /etc/X11/xorg.conf.d/40-libinput.conf

		# Fix fluidsynth/pulseaudio issue.
		grep -q "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" /etc/conf.d/fluidsynth ||
			echo "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" >> /etc/conf.d/fluidsynth

		# Start/restart PulseAudio.
		killall pulseaudio; sudo -u "$name" pulseaudio --start

		# This line, overwriting the `newperms` command above will allow the user to run
		# serveral important commands, `shutdown`, `reboot`, updating, etc. without a password.
		newperms "%wheel ALL=(ALL) ALL #MARIO
		%wheel ALL=(ALL) NOPASSWD: /usr/bin/make,/usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Qu,/usr/bin/systemctl restart NetworkManager,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/pacman -Qqe,/usr/bin/pacman,/usr/bin/pacman -S needed,/usr/bin/pacman -Slq,/usr/bin/loadkeys,/usr/bin/yay,/usr/bin/paru,/usr/bin/paru -Syu,/usr/bin/pacman -Syyuw --noconfirm,/usr/local/bin/sigdwmblocks"

		symlink
		cleanup
	 	finalize
		clear

	elif $MACOS; then
		OS="MacOS"
		insbrew || error "User Exited"
		echo "Installing Dialog"
		installpkg dialog || error "User Exited"
		# welcomemsg || error "User Exited"
		rarbtype || error "rarbtype error"
		for x in curl git ntp zsh; do
			dialog --title "RARBS Installation" --infobox "Installing \`$x\` which is required to install and configure other programs." 5 70
			installpkg "$x"
		done
		installationloop
		# put some default config here for macOS  (Boostraping setting)
		# opt/macosdefault.sh
		#
		# cleanup
		finalize
		clear
	fi

}
main
