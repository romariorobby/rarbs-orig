#!/bin/sh
while getopts ":a:r:b:p:s:h" o; do case "${o}" in
	h) printf "Optional arguments for custom use:\\n  -r: Dotfiles repository (local file or url)\\n  -p: Dependencies and programs csv (local file or url)\\n  -s: Homebrew Source (tap)\\n  -a: AUR helper (must have pacman-like syntax) (paru by default)\\n  -h: Show this message\\n" && exit 1 ;;
	r) dotfilesrepo=${OPTARG} && chezmoi git ls-remote "$dotfilesrepo" || exit 1 ;;
	b) repobranch=${OPTARG} ;;
	p) progsfile=${OPTARG} ;;
	s) brewtapfile=${OPTARG} ;;
	a) aurhelper=${OPTARG} ;;
	*) printf "Invalid option: -%s\\n" "$OPTARG" && exit 1 ;;
esac done

getOS() { \
	case "$OSTYPE" in
	  darwin*)  OS="MacOS" && installMac ;;
	  linux*)   OS="ArchLinux" && installLin ;;
	  msys*)    OS="Windows" && installWin ;;
	  bsd*)     OS="BSD" ;;
	  solaris*) OS="SOLARIS" ;;
	  *)        error "unknown OS: $OSTYPE" ;;
	esac
}

[ -z "$dotfilesrepo" ] && dotfilesrepo="https://github.com/romariorobby/dotfiles.git"
[ -z "$sshdotfilesrepo" ] && sshdotfilesrepo="git@github.com:romariorobby/dotfiles.git"
[ -z "$progsfile" ] && progsfile="https://raw.githubusercontent.com/romariorobby/rarbs/master/progs.csv"
[ -z "$brewtapfile" ] && brewtapfile="https://raw.githubusercontent.com/romariorobby/rarbs/master/opt/brewtap.csv"
[ -z "$aurhelper" ] && aurhelper="paru"
# var for Password Manager (Bitwarden,pass)
[ -z "$is_secret" ] && is_secret=""
installpkg() { \
	if [[ -f "/etc/arch-release" ||  -f "/etc/artix-release" ]]; then
		pacman --noconfirm --needed -S "$1" >/dev/null 2>&1
	elif [ "$(uname)" == "Darwin" ]; then
		brew install "$1" >/dev/null 2>&1
	fi
}
modepick(){ \
	mpick=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select RARBS Mode: " 10 80 3 \
	        I "Installer (Archlinux only)" off \
		R "(Re)install Package / Recheck Package from progs.csv" on \
		P "(Re)install Package / Recheck Package from progs.csv" on \
		D "Debug" off 3>&1 1>&2 2>&3 3>&1)
	case $mpick in
		"I") namempick="Installer" ;;
		"R") namempick="(Re)install Package" ;;
		"D") namempick="Debug" ;;
	esac
}
# TODO: Testing this func shit
wmdepick() { \
	wmtype=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select Windows Manager OR Desktop Environment: " 15 60 3 \
		A "Awesome" off \
		D "DWM" off \
		G "GNOME(Not available yet)" off \
		X "XFCE(Not available yet)" off \
		K "KDE (Not available yet)" off \
		Z "Don't Install" on 3>&1 1>&2 2>&3 3>&1)
}
installawesome(){ \
	awmdir="/home/$name/.config/awesome"
	dialog --title "RARBS WM/DE" --infobox "Installing \`Awesome\`" 5 70
	installpkg awesome
	if [ ! -d "$awmdir" ];then
		sudo -u "$name" mkdir -p $awmdir
		sudo -u "$name" cp /etc/xdg/awesome/rc.lua $awmdir
		# change default term,editor, and close binding
		sudo -u "$name" sed -i 's/xterm/kitty/g;s/nano/nvim/g;s/"c"/"q"/g' $awmdir/rc.lua
	fi
}
installdwm(){ \
	dwmdir="/home/$name/.local/src"
	[ ! -d "$dwmdir" ] && sudo -u "$name" mkdir $dwmdir || return 1
	dialog --title "RARBS WM/DE" --infobox "Installing \`DWM\`" 5 70
	sudo -u "$name" git clone https://github.com/romariorobby/dwm $dwmdir/dwm
	cd $dwmdir/dwm && make clean install
}
wmdeinstall(){ \
	wmdepick
	case $wmtype in 
		"A") installawesome ;;
		"D") installdwm ;;
		*)   dialog --title "Warning" --msgbox "NO WM/DE Installed" 5 40
	esac
}
tapbrew(){ \
	brew tap "$1" >/dev/null 2>&1
}

error() { clear; printf "ERROR:\\n%s\\n" "$1" >&2; exit 1;}

welcomemsg() { \
	dialog --title "Welcome!" --msgbox "Buggy Bootstrap\\n\\nThis script will automatically install a fully-featured $OS desktop.\\n\\n-Romario" 10 60
	dialog --colors --title "Important Note!" --yes-label "All ready!" --no-label "Return..." --yesno "If you running GNU/LINUX(Arch), Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.\\n\\nIf it does not, the installation of some programs might fail." 8 70
	}

typepick() { \
	tpick=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select RARBS Type: " 10 60 3 \
		B "Base Only" on \
		M "Minimal" on \
		F "Full" off 3>&1 1>&2 2>&3 3>&1)
	case $tpick in
		"B") nametpick="Base" ;;
		"M") nametpick="Minimal" ;;
		"F") nametpick="Full" ;;
	esac
}

getuserandpass() { \
	# Prompts user for new username an password.
	name=$(dialog --inputbox "First, please enter a name for the user account." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
	while ! echo "$name" | grep -q "^[a-z_][a-z0-9_-]*$"; do
		name=$(dialog --no-cancel --inputbox "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
	pass1=$(dialog --no-cancel --passwordbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
	pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$pass1" = "$pass2" ]; do
		unset pass2
		pass1=$(dialog --no-cancel --passwordbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done ;}

usercheck() { \
	! { id -u "$name" >/dev/null 2>&1; } ||
	dialog --colors --title "WARNING!" --yes-label "CONTINUE" --no-label "No wait..." --yesno "The user \`$name\` already exists on this system. RARBS can install for a user already existing, but it will \\Zboverwrite\\Zn any conflicting settings/dotfiles on the user account.\\n\\nRARBS will \\Zbnot\\Zn overwrite your user files, documents, videos, etc., so don't worry about that, but only click <CONTINUE> if you don't mind your settings being overwritten.\\n\\nNote also that RARBS will change $name's password to the one you just gave." 14 70
	}
# TODO Probably make own func for do you want use password manager? isuserpwdmgr()
isuserbw() { \
	dialog --colors --title "Install Bitwarden" --yesno "Do you want login \\Zbbitwarden\\Zn? Otherwise '\\Zbpass (gpg)\\Zn' will be used" 6 90 && getbwuserandpass && is_secret=1 && is_bw=1 && addbwuserandpass || clear
	# dialog --colors --title "Install Bitwarden" --yesno "Do you want login \\Zbbitwarden\\Zn? Otherwise '\\Zbpass (gpg)\\Zn' will be used" 6 90 && getbwuserandpass && is_secret=1 && is_bw=1 && addbwuserandpass || clear
}

# TODO Fix pass can't retrieve from root user , ignore until fixed!
isuserpass() { \
	# https://github.com/fpco/best-practices/blob/master/password-store.md
	dialog --colors --title "Install Pass" --yesno "Do you want login \\Z0\\ZbPass\\Z0\\Zn? " 6 90 && getpassuserandpass && is_secret=1 && addpassuserandpass || clear
}

getpassuserandpass(){ \
	[ -x "$(command -v "pass")" ] || installpkg pass
	passname=$(dialog --colors --inputbox "First, please enter a username for \\Zbpass\\Zn repo." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
	pass1=$(dialog --colors --no-cancel --inputbox "Enter a password for that user(\\Zb$passname\\Zn)." 10 60 3>&1 1>&2 2>&3 3>&1)
	pass2=$(dialog --no-cancel --inputbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$pass1" = "$pass2" ]; do
		unset pass2
		pass1=$(dialog --no-cancel --inputbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		pass2=$(dialog --no-cancel --inputbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done ;}

addpassuserandpass(){\
	[ "$(uname)" == "Darwin" ] && passdir="$HOME/.local/share/password-store" || passdir="/home/$name/.local/share/password-store"
	#Backup $passdir and replace $passdir-bak to new one if exist just in case
	[ -d "$passdir-bak" ] && rm -rf $passdir-bak
	[ -d "$passdir" ] && mv $passdir $passdir-bak
	dialog --infobox "Adding Pass user \"$passname\"..." 4 50
	git clone https://$passname:$pass1@github.com/$passname/pass.git $passdir
	while ! [ "$?" = 0 ]; do
		dialog --colors --no-cancel --infobox "Username \\Zb($passname)\\Zn or Password \\Zb($pass1)\\Zn \\Z1Error.\\Z1\\n\\nEnter Username and Password Again..." 10 50
		rm -rf $pasdir
		sleep 5s
		getpassuserandpass
		addpassuserandpass
	done
}

getbwuserandpass() { \
	bwname=$(dialog --colors --inputbox "First, please enter a email address for \\Zbbitwarden\\Zn." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
	while ! echo "$bwname" | grep -q '\S\+@\S\+\.[A-Za-z]\+'; do
		bwname=$(dialog --colors --no-cancel --inputbox "Email Address \\Z1not valid\\Zn. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
	bwpass1=$(dialog --no-cancel --inputbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
	bwpass2=$(dialog --no-cancel --inputbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$bwpass1" = "$bwpass2" ]; do
		unset bwpass2
		bwpass1=$(dialog --no-cancel --inputbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		bwpass2=$(dialog --no-cancel --inputbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done ;}

# TODO: Cleanup
addbwuserandpass () { \
	if [ "$(uname)" == "Darwin" ];then
		dialog --infobox "Adding Bitwarden-cli user \"$bwname\" for $name..." 4 50
		[ -x "$(command -v "bw")" ] || installpkg bitwarden-cli >/dev/null 2>&1
		bwdirmac="$HOME/.local/share/bitwarden"; mkdir -p "$bwdirmac"
		# dialog --infobox "Adding Email Adress and Password..." 4 50
		# echo $bwname > $bwdirmac/email && echo $bwpass1 > $bwdirmac/key
		# ses=$(bw login $bwname $bwpass1 2>/dev/null | grep 'export' | sed -E 's/.*export BW_SESSION="(.*==)"$/\1/')
	else
		dialog --infobox "Adding Bitwarden-cli user \"$bwname\" for $name..." 4 50
		[ -x "$(command -v "bw")" ] || aurinstall bitwarden-cli-bin >/dev/null 2>&1
		bwdir="/home/$name/.local/share/bitwarden"; mkdir -p "$bwdir"; chown -R "$name":wheel "$(dirname "$bwdir")"
		dialog --infobox "Adding Email Adress and Password..." 4 50
		[ -f "$bwdir/email" -a -f "$bwdir/key"  ] && cp $bwdir/email $bwdir/email.bak && cp $bwdir/key $bwdir/email.bak
		# sudo -u "$name" echo $bwname > $bwdir/email && sudo -u "$name" echo $bwpass1 > $bwdir/key
		# sudo -u "$name" bw login --raw $bwname $bwpass1
		# dialog --infobox "Login on Bitwarden & Adding Environment Variables Locally..." 10 50
		# export BW_SESSION=$(sudo -u "$name" bw login --raw $bwname $bwpass1)
	fi
	dialog --infobox "Login on Bitwarden & Adding Environment Variables Locally..." 10 50
	bw logout 2>/dev/null
	export BW_SESSION=$(bw login $bwname $bwpass1 --raw)
	while [ -z "$BW_SESSION" ]; do
		dialog --colors --no-cancel --infobox "Username \\Zb($bwname)\\Zn or Password \\Zb($bwpass1)\\Zn \\Z1Error.\\Z1\\n\\nEnter Username and Password Again..." 10 50
		sleep 5s
		getbwuserandpass
		addbwuserandpass
	done
	}

preinstallmsg() { \
	dialog --title "Let's get this party started!" --yes-label "Let's go!" --no-label "No, nevermind!" --yesno "The rest of the installation will now be totally automated, so you can sit back and relax.\\n\\nIt will take some time, but when done, you can relax even more with your complete system.\\n\\nNow just press <Let's go!> and the system will begin installation!" 13 60 || { clear; exit 1; }
	}

adduserandpass() { \
	# Adds user `$name` with password $pass1.
	dialog --infobox "Adding user \"$name\"..." 4 50
	useradd -m -g wheel -s /bin/zsh "$name" >/dev/null 2>&1 ||
	usermod -a -G wheel "$name" && mkdir -p /home/"$name" && chown "$name":wheel /home/"$name"
	repodir="/home/$name/.local/src"; mkdir -p "$repodir"; chown -R "$name":wheel "$(dirname "$repodir")"
	echo "$name:$pass1" | chpasswd
	unset pass1 pass2 ;}

refreshkeys() { \
	dialog --infobox "Refreshing Arch Keyring..." 4 40
	pacman -Q artix-keyring >/dev/null 2>&1 && pacman --noconfirm -S artix-keyring >/dev/null 2>&1
	pacman --noconfirm -S archlinux-keyring >/dev/null 2>&1
	}

newperms() { # Set special sudoers settings for install (or after).
	sed -i "/#RARBS/d" /etc/sudoers
	echo "$* #RARBS" >> /etc/sudoers ;}

maininstall() { # Installs all needed programs from main repo.
	echo "$pacinstalled" | grep -q "^$1$" && \
		dialog --title "RARBS Installation - $nametpick [$namempick Mode]" --infobox "\`$1\` already installed from the package manager." 5 70 && sleep 0.1s && return 1
	dialog --title "RARBS Installation - $nametpick [$namempick Mode]" --infobox "Installing \`$1\` ($n of $total). $1 $2" 5 70
	installpkg "$1"
	}

maintap() {
	dialog --title "RARBS Homebrew Source" --infobox "Adding \`$1\` to Homebrew ($s of $totaltap). $1 $2" 5 70
	tapbrew "$1"
}

# This must use before `chezmoi --apply` to make it work
copygpg(){ \
	gurls="https://raw.githubusercontent.com/romariorobby/dotfiles/main/dot_local/share/vault/encrypted_aqs.tar.gz.asc"
	[ "$(uname)" == "Darwin" ] && gpgdir="$HOME/.local/share/vault" || gpgdir="/home/$name/.local/share/vault"
	if [ "$(uname)" == "Darwin" ]; then
		dialog --infobox "Downloading GPG ..." 4 60
		[ -x "$(command -v "gpg")" ] || installpkg gnupg
		[ -d "$HOME/.gnupg" ] && rm -rf $HOME/.gnupg
		[ ! -d "$gpgdir" ] && sudo -u "$name" mkdir -p $gpgdir
		[ -f "$gpgdir/aqs.tar.gz.asc" ] || curl -Ls "$gurls" -o $gpdir/aqs.tar.gz.asc
		dialog --infobox "Decrypting GPG ..." 4 60
		gpg $gpdir/aqs.tar.gz.asc || error "Error Decrypting"
		tar -xzvf $gpgdir/aqs.tar.gz -C $HOME && clear
	else
		dialog --infobox "Downloading GPG ..." 4 60
		[ -x "$(command -v "gpg")" ] || installpkg gnupg
		[ -d "/home/$name/.gnupg" ] && rm -rf /home/$name/.gnupg
		[ ! -d "$gpgdir" ] && sudo -u "$name" mkdir -p $gpgdir
		[ -f "$gpgdir/aqs.tar.gz.asc" ] || curl -Ls "$gurls" -o $gpgdir/aqs.tar.gz.asc
		dialog --infobox "Decrypting GPG ..." 4 60
		sudo -u "$name" gpg $gpgdir/aqs.tar.gz.asc 2>/dev/null || error "Error Decrypting"
		sudo -u "$name" tar -xzf $gpgdir/aqs.tar.gz -C /home/$name && clear
	fi
}
# install dotfiles using chezmoi
# secret on + B
# secret on + M
# secret on + F	
# secret off + B
# secret off + M
# secret off + F	
ischezsecret(){ \
	if [ -z $is_secret ] && [ "$tpick" == "M" ];then
		case "$OSTYPE" in
			darwin*) DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
			linux*) sudo -u "$name" DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
		esac
		echo "MINIMAL and NO SECRET"
	else
		if [ "$(uname)" == "Darwin" ]; then
			SECRETOFF=1 chezmoi init --apply "$1"
		else
			sudo -u "$name" SECRETOFF=1 chezmoi init --apply "$1"
		fi
	fi

}
chezbase(){ \
	case "$OSTYPE" in
		darwin*) DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
		linux*) sudo -u "$name" DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
	esac
}
chezmoiinstalldot(){ \
	# depend on Bitwarden and Chezmoi Variable
	# OSX
	if [ -z $is_secret ];then
		case $OSTYPE:$tpick in
			linux*:"M") sudo -u "$name" DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
			linux*:"F") sudo -u "$name" SECRETOFF=1 chezmoi init --apply "$1" ;;
			*:"M") SECRETOFF=1 chezmoi init --apply "$1" ;;
			*:"F") DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
		esac
	else
		case $OSTYPE:$tpick in
			linux*:"M") sudo -u "$name" DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
			linux*:"F") sudo -u "$name" SECRETOFF=1 chezmoi init --apply "$1" ;;
			*:"M") SECRETOFF=1 chezmoi init --apply "$1" ;;
			*:"F") DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
		esac
	fi

	if [ "$tpick" == "M" ]; then
		if [ -z $is_secret ];then
			if [ "$OSTYPE" == "linux-gnu" ]; then
				sudo -u "$name" DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1"
			else
				DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1"
			fi
			echo "MINIMAL and NO SECRET"
		else
			if [ "$OSTYPE" == "linux-gnu" ]; then
				[ -z $is_bw ] && sudo -u "$name" DOTMIN=1 chezmoi init "$1" || sudo -u "$name" BW=1 DOTMIN=1 chezmoi init "$1" 
				copygpg
				[ -d "/home/$name/.gnupg" ] && sudo -u "$name" chezmoi apply
			else
				[ -z $is_bw ] && DOTMIN=1 chezmoi init "$1" || BW=1 DOTMIN=1 chezmoi init "$1"
				copygpg
				[ -d "$HOME/.gnupg" ] && chezmoi apply
			fi
			echo "MINIMAL and SECRET"
		fi
	else
		if [ -z $is_secret ];then
			if [ "$OSTYPE" == "linux-gnu" ]; then
				sudo -u "$name" SECRETOFF=1 chezmoi init --apply "$1"
			else
				SECRETOFF=1 chezmoi init --apply "$1"
			fi
			echo "FULL and NO SECRET"
		else
			if [ "$OSTYPE" == "linux-gnu" ]; then
				[ -z $is_bw ] && sudo -u "$name" chezmoi init "$1" || sudo -u "$name" BW=1 chezmoi init "$1"
				copygpg
				[ -d "/home/$name/.gnupg" ] && sudo -u "$name" chezmoi apply
			else
				[ -z $is_bw ] && chezmoi init "$1" || BW=1 chezmoi init "$1"
				copygpg
				[ -d "$HOME/.gnupg" ] && chezmoi apply
			fi
			echo "FULL and SECRET"
		fi
	fi
}

chezmoiinstall() {
	dialog --infobox "Downloading and installing config files..." 4 60
	[ -x "$(command -v "chezmoi")" ] || installpkg chezmoi >/dev/null 2>&1
	chezmoiinstalldot "$1" ;}

gitmakeinstall() {
	progname="$(basename "$1" .git)"
	dir="$repodir/$progname"
	dialog --title "RARBS Installation" --infobox "Installing \`$progname\` ($n of $total) via \`git\` and \`make\`. $(basename "$1") $2" 5 70
	sudo -u "$name" git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 || { cd "$dir" || return 1 ;}
	cd "$dir" || exit 1
	make >/dev/null 2>&1
	make install >/dev/null 2>&1
	cd /tmp || return 1 ;}

manualinstall(){
	[ -f "/usr/bin/$1" ] || (
	dialog --infobox "Installing \"$1\", an AUR helper..." 4 50
	cd /tmp || exit 1
	rm -rf /tmp/"$1"*
	sudo -u "$name" git clone https://aur.archlinux.org/$1.git &&
	cd $1 && sudo -u "$name" makepkg -si --noconfirm >/dev/null 2>&1
	cd /tmp || return 1) ;}

insbrew(){ \
	echo "Installing XCode CLT..."
	[ -d "/Library/Developer/CommandLineTools" ] && echo "Xcode Installed.." || xcode-select --install
	[ -x "$(command -v "brew")" ] && echo "Brew Already Installed" || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
	brew update
}

aurinstall() { \
	echo "$aurinstalled" | grep -q "^$1$" && \
		dialog --title "RARBS Installation - $nametpick [$namempick Mode]" --infobox "\`$1\` already installed from the AUR." 5 70 && sleep 0.1s && return 1
	dialog --title "RARBS Installation - $nametpick [$namempick Mode]" --infobox "Installing \`$1\` ($n of $total) from the AUR. $1 $2" 5 70
	sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1
	}

pipinstall() { \
	echo "$pipinstalled" | grep -q "^$1$" && \
		dialog --title "RARBS Installation - $nametpick [$namempick Mode] " --infobox "\`$1\` already installed from the PIP." 5 70 && sleep 0.1s && return 1
	dialog --title "RARBS Installation - $nametpick [$namempick Mode]" --infobox "Installing the Python package \`$1\` ($n of $total). $1 $2" 5 70
	if [ "$(uname)" == "Darwin" ]; then
		[ -x "$(command -v "pip")" ] || curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python3 get-pip.py >/dev/null 2>&1
	else 
		[ -x "$(command -v "pip")" ] || installpkg python-pip >/dev/null 2>&1
	fi
	yes | pip install "$1"
	}

npminstall() { \
	echo "$npminstalled" | grep -q "^$1$" && \
		dialog --title "RARBS Installation - $nametpick [$namempick Mode] " --infobox "\`$1\` already installed from the NPM." 5 70 && sleep 0.1s && return 1
	dialog --title "RARBS Installation - $nametpick [$namempick Mode]" --infobox "Installing the NPM package \`$1\` ($n of $total). $1 $2" 5 70
	[ -x "$(command -v "npm")" ] || installpkg npm >/dev/null 2>&1 || installpkg node >/dev/null 2>&1
	npm install -g "$1"
	}

filterprog(){ \
	if [ "$(uname)" == "Darwin" ]; then
		case $tpick in
			"B") ([ -f "$progsfile" ] && grep "^[HPN]," $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | grep "^[HPN]," > /tmp/progs.csv ;;
			"M") ([ -f "$progsfile" ] && grep "^[HPN],\|HM,\|PM,\|NM," $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | grep "^[HPN],\|HM,\|PM,\|NM," > /tmp/progs.csv ;;
			"F") ([ -f "$progsfile" ] && sed '/^[#AM]/d' $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | sed '/^[#AM]/d' > /tmp/progs.csv ;;
		esac
	else
		case $tpick in
			"B") ([ -f "$progsfile" ] && grep "^[AMGPN]," "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | grep "^[AMGPN]," > /tmp/progs.csv ;;
			"M") ([ -f "$progsfile" ] && grep "^[AM],\|MM,\|AM,\|PM,\|NM,\|GM," "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | grep "^[AM],\|MM,\|AM,\|PM,\|NM,\|GM," > /tmp/progs.csv ;;
			"F") ([ -f "$progsfile" ] && sed '/^[#H]/d' "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | sed '/^[#H]/d' > /tmp/progs.csv ;;
		esac
	fi
}
filtertap(){ \
	case $tpick in
		"B") ([ -f "$brewtapfile" ] && grep "^M," $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | grep "^M," > /tmp/brewtap.csv ;;
		"M") ([ -f "$brewtapfile" ] && grep "^MM," $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | grep "^MM," > /tmp/brewtap.csv ;;
		"F") ([ -f "$brewtapfile" ] && sed '/^#/d' $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | sed '/^#/d' > /tmp/brewtap.csv ;;
	esac
}
installationtaploop(){ \
	filtertap
	totaltap=$(wc -l < /tmp/brewtap.csv)
	while IFS=, read -r tag source comment; do
		s=$((s+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		case "$tag" in
			*) maintap "$source" "$comment" ;;
		esac
	done < /tmp/brewtap.csv
}
installationloop() { \
	filterprog
	[ "$(uname)" == "Darwin" ] && installationtaploop
	# TODO: Make Read from org file del/IFS="|"
	# ([ -f "$progsfile" ] && cp "$progsfile" /tmp/progs.csv) || curl -lLs "$progsfile" | sed '/^-\|*\|#/d;/^|-/d' > /tmp/progs.csv
	total=$(wc -l < /tmp/progs.csv)
	[[ -f "/etc/arch-release" || -f "/etc/artix-release" ]] && aurinstalled=$(pacman -Qqm) && pacinstalled=$(pacman -Qq)
	[ "$(uname)" == "Darwin" ] && pacinstalled=$(brew list | uniq)
	npminstalled=$(npm ls -g | awk '{print $2}' | sed 's/\@.*//; /^$/d')
	pipinstalled=$(pip list | awk '{print $1}')
	while IFS=, read -r tag program comment; do
		n=$((n+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		case $tpick:$tag in
			# Package Manager/AUR , Git
			"B":"M"|"H") maininstall "$program" "$comment" ;;
			"B":"A") aurinstall "$program" "$comment" ;;
			"B":"G") gitmakeinstall "$program" "$comment" ;;
			"M":"M"|"H"|"HM"|"MM") maininstall "$program" "$comment" ;;
			"M":"A"|"AM") aurinstall "$program" "$comment" ;;
			"M":"G"|"GM") gitmakeinstall "$program" "$comment" ;;
			"F":"M"|"H"|"HM"|"HO"|"MM"|"MO") maininstall "$program" "$comment" ;;
			"F":"A"|"AM"|"AO") aurinstall "$program" "$comment" ;;
			"F":"G"|"GM"|"GO") gitmakeinstall "$program" "$comment" ;;
			#npm,pip
			"B":"P"|"N") pipinstall "$program" "$comment" ;;
			"B":"P"|"N") pipinstall "$program" "$comment" ;;
			"M":"PM"|"NM") pipinstall "$program" "$comment" ;;
			"M":"PM"|"NM") pipinstall "$program" "$comment" ;;
			"F":"P"|"PM"|"PO") pipinstall "$program" "$comment" ;;
			"F":"N"|"NM"|"NO") pipinstall "$program" "$comment" ;;
		esac
	done < /tmp/progs.csv ;}

systembeepoff() {
	dialog --infobox "Getting rid of that retarded error beep sound..." 10 50
	rmmod pcspkr
	echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf ;}

symlink(){ \
	[ -f "/etc/bash.bashrc" ] && echo '
	if [ -s "${XDG_CONFIG_HOME:-$HOME/.config}/bash/.bashrc" ]; then
			. "${XDG_CONFIG_HOME:-$HOME/.config}/bash/.bashrc"
	fi
	' >> /etc/bash.bashrc
	if [ "$(uname)" == "Darwin" ]; then
		# Init
		cd $HOME && rm .bashrc .bash_history .bash_profile .bash_logout .zsh_history
		[ -d $HOME/.local/share/chezmoi ] && chezmoi -v apply

		# Symlink profile shell if exist
		[ -d $HOME/.config/shell ] && ln -sf $HOME/.config/shell/profile $HOME/.profile &&
		ln -sf $HOME/.config/shell/profile $HOME/.zprofile && echo "Symlink Shell"
	else
		# Init
		cd /home/$name && rm .bashrc .bash_history .bash_profile .bash_logout
		[ -d /home/$name/.local/share/chezmoi ] && sudo -u "$name" chezmoi -v apply

		# Symlink profile shell if exist
		[ -d /home/$name/.config/shell ] && sudo -u "$name" ln -sf /home/$name/.config/shell/profile /home/$name/.profile &&
		sudo -u "$name" ln -sf /home/$name/.config/shell/profile /home/$name/.zprofile && echo "Symlink Shell"

		# Symlink profile x11 if exist
		[ -d /home/$name/.config/x11 ] && sudo -u "$name" ln -sf /home/$name/.config/x11/xinitrc /home/$name/.xinitrc &&
		sudo -u "$name" ln -sf /home/$name/.config/x11/xprofile /home/$name/.xprofile && echo "Symlink X11"
	fi
}
# TODO: Check this Post browserpass install
passins(){ \
	if [ "$(uname)" == "Darwin" ]; then
		[ ! -d "/usr/local/opt/browserpass" ] && installpkg bitwarden-cli >/dev/null 2>&1 || PREFIX='/usr/local/opt/browserpass' make hosts-BROWSER-user -f '/usr/local/opt/browserpass/lib/browserpass/Makefile'
	fi

}

# TODO: Complete Cleanup
cleanup() { \
	dialog --title "Cleanup" --yesno "Do you want clean all caches?" 8 90
	# This is just for aestetic neofetch :)
	if [ "$(uname)" == "Darwin" ]; then
		# mv rarbstype $HOME/.local/share
		[ "$tpick" == "M" ] && echo "Minimal - " > $HOME/.local/share/rarbstype || echo "Full - " > $HOME/.local/share/rarbstype
		[ ! -z "$is_secret" ] && echo "(Secret)" >> $HOME/.local/share/rarbstype || echo "(No Secret)" >> $HOME/.local/share/rarbstype
	else
		[ "$tpick" == "M" ] && echo "Minimal - " > /home/$name/.local/share/rarbstype || echo "Full - " > $HOME/.local/share/rarbstype
		[ ! -z "$is_secret" ] && echo "(Secret)" >> /home/$name/.local/share/rarbstype || echo "(No Secret)" >> $HOME/.local/share/rarbstype
	fi
	rm rarbstype wmtype

}

finalize(){ \
	dialog --infobox "Preparing welcome message..." 4 50
	if [ "$(uname)" == "Darwin" ]; then
		dialog --title "All done, MAC!" --msgbox "Congrats $name! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\n Some configurations needed to restart .\\n\\n.t Romario" 12 80
	else
		dialog --title "All done, LINUX!" --msgbox "Congrats! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\nTo run the new graphical environment, log out and log back in as your new user, then run the command \"startx\" to start the graphical environment (it will start automatically in tty1).\\n\\n.t Romario" 12 80
	fi
}
laptopconf(){ \

}
mpickI() { \
	# Get and verify username and password.
	getuserandpass || error "User exited."

	# Give warning if user already exists.
	usercheck || error "User exited."

	# Last chance for user to back out before install.
	preinstallmsg || error "User exited."

	# Refresh Arch keyrings.
	refreshkeys || error "Error automatically refreshing Arch keyring. Consider doing so manually."

	for x in curl base-devel dmidecode git ntp zsh; do
		dialog --title "RARBS Installation" --infobox "Installing \`$x\` which is required to install and configure other programs." 5 70
		installpkg "$x"
	done

	dialog --title "RARBS Installation" --infobox "Synchronizing system time to ensure successful and secure installation of software..." 4 70
	ntpdate 0.id.pool.ntp.org >/dev/null 2>&1

	adduserandpass || error "Error adding username and/or password."

	[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers # Just in case

	# Allow user to run sudo without password. Since AUR programs must be installed
	# in a fakeroot environment, this is required for all builds with AUR.
	newperms "%wheel ALL=(ALL) NOPASSWD: ALL"

	# Make pacman and yay colorful, Enable Parallel Download and adds eye candy on the progress bar because why not.
	grep -q "^Color" /etc/pacman.conf || sed -i "s/^#Color$/Color/" /etc/pacman.conf
	grep -q "^ParallelDownloads" /etc/pacman.conf || sed -i "s/#Parallel/Paralell/" /etc/pacman.conf
	grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf

	# Use all cores for compilation.
	sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf

	# manualinstall $aurhelper || error "Failed to install AUR helper."
	manualinstall paru-bin || manualinstall $aurhelper || error "Failed to install $aurhelper (AUR helper)."

	# Get bitwarden user and verify email and password
	isuserbw || error "User Exited"

	# The command that does all the installing. Reads the progs.csv file and
	# installs each needed program the way required. Be sure to run this only after
	# the user has been created and has priviledges to run sudo without a password
	# and all build dependencies are installed.
	installationloop

	# Pick & Install Windows Manager
	wmdeinstall

	dialog --title "RARBS Installation" --infobox "Finally, installing \`libxft-bgra\` to enable color emoji in suckless software without crashes." 5 70
	yes | sudo -u "$name" $aurhelper -S libxft-bgra-git >/dev/null 2>&1

	# Most important command! Get rid of the beep!
	systembeepoff

	# Make zsh the default shell for the user.
	chsh -s /bin/zsh "$name" >/dev/null 2>&1
	sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"

	chezmoiinstall "$dotfilesrepo"

	# Tap to click
	if [ -x "$(command -v "dmidecode")" ]; then
		#https://superuser.com/questions/877677/programatically-determine-if-an-script-is-being-executed-on-laptop-or-desktop
		is_chassis=$(dmidecode --string chassis-type)
	else
		# Systemd Spesific
		is_chassis=$(hostnamectl chassis)
	fi
	[ "is_chassis" == "Notebook" ] || [ "$is_chassis" = "laptop" ] && \
		"[ ! -f /etc/X11/xorg.conf.d/40-libinput.conf ] && printf 'Section "InputClass"
			Identifier "libinput touchpad catchall"
			MatchIsTouchpad "on"
			MatchDevicePath "/dev/input/event*"
			Driver "libinput"
		# Enable left mouse button by tapping
		Option "Tapping" "on"
	EndSection' > /etc/X11/xorg.conf.d/40-libinput.conf

	# Fix fluidsynth/pulseaudio issue.
	grep -q "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" /etc/conf.d/fluidsynth ||
		echo "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" >> /etc/conf.d/fluidsynth

	# Start/restart PulseAudio.
	killall pulseaudio; sudo -u "$name" pulseaudio --start

	if [ ! -z "$(pidof -s runit)" ]; then
			# Dbus uuidgen must generated
			dbus-uuidgen > /var/lib/dbus/machine-id
			# Use sytem notif off Brave
			echo "export \$(dbus-launch)" > /etc/profile.d/dbus.sh
	fi
	# This line, overwriting the `newperms` command above will allow the user to run
	# serveral important commands, `shutdown`, `reboot`, updating, etc. without a password.
	newperms "%wheel ALL=(ALL) ALL #MARIO
	%wheel ALL=(ALL) NOPASSWD: /usr/bin/make,/usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Qu,/usr/bin/systemctl restart NetworkManager,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/pacman -Qqe,/usr/bin/pacman,/usr/bin/pacman -S needed,/usr/bin/pacman -Slq,/usr/bin/loadkeys,/usr/bin/yay,/usr/bin/paru,/usr/bin/paru -Syu,/usr/bin/pacman -Syyuw --noconfirm,/usr/local/bin/sigdwmblocks"

	symlink
	cleanup
}
mpickD() { \
	DIRS="$(dirname "$0")"
	source "$DIRS/debug"
}
mpickR(){
	name=$(echo $USER)

	# Pick Windows Manager
	wmdepick || error "wmdepick error"

	# Last chance for user to back out before install.
	preinstallmsg || error "User exited."

	# Refresh Arch keyrings.
	refreshkeys || error "Error automatically refreshing Arch keyring. Consider doing so manually."

	for x in curl base-devel git ntp zsh; do
		dialog --title "RARBS Installation" --infobox "Installing \`$x\` which is required to install and configure other programs." 5 70
		installpkg "$x"
	done

	# manualinstall $aurhelper || error "Failed to install AUR helper."
	manualinstall paru-bin || manualinstall $aurhelper || error "Failed to install $aurhelper (AUR helper)."

	# The command that does all the installing. Reads the progs.csv file and
	# installs each needed program the way required. Be sure to run this only after
	# the user has been created and has priviledges to run sudo without a password
	# and all build dependencies are installed.
	installationloop

	wmdeinstall
}
installLin(){ \
	case $mpick in
		"I") mpickI ;;
		"R") mpickR ;;
		"D") mpickD ;;
	esac

}
installMac(){ \
	insbrew || error "User Exited"

	for x in curl git ntp zsh; do
		dialog --title "RARBS Installation" --infobox "Installing \`$x\` which is required to install and configure other programs." 5 70
		installpkg "$x"
	done

	installationloop

	# Get bitwarden user and verify email and password
	isuserbw || error "User Exited"

	chezmoiinstall "$dotfilesrepo"
	# put some default config here for macOS  (Boostraping setting)
	# opt/macosdefault.sh
	#
	# cleanup

}
main(){ \
	installpkg dialog || error "Are you sure you're running this as the root user, are on an $OS and have an internet connection?"

	# Welcome user and pick dotfiles.
	welcomemsg || error "User Exited"

	# Rarbs mode
	modepick || error "modepick error"

	# Type Pick
	typepick || error "Error Picking type"
	case "$OSTYPE" in
		darwin*)  installMac ;;
		linux*)   installLin ;;
		msys*)    installWin ;;
		bsd*)     error "$OSTYPE Not yet supported";;
		solaris*) error "$OSTYPE Not yet supported";;
		*)        error "unknown OS: $OSTYPE" ;;
	esac
	finalize
	clear

}
installWin(){\
	echo "windows"

}
main "$@"
